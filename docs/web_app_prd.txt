述格 (ScriptGrid) - Web 应用产品需求文档 (PRD)

文档版本: V1.1
修订日期: 2025年8月15日
作者: Qwen Code
修订说明: 初始版本，为将桌面应用重构为 Web 应用并 Docker 部署制定需求。细化了核心业务流程中关于转换类型选择的交互逻辑。

---

1. 项目概述

1.1 项目背景
当前"述格 (ScriptGrid)"是一款桌面应用程序，用户需要下载并安装后才能使用。为了提升易用性、简化部署和实现跨平台访问，计划将其重构为一个基于浏览器的 Web 应用程序，并通过 Docker 容器化部署。这将允许用户通过 URL 直接访问服务，无需安装任何本地软件。

1.2 产品简介
"述格 (ScriptGrid) Web 版"是一个基于 Web 的工具，旨在帮助用户将 .ass 和 .srt 格式的字幕文件快速转换为 .xlsx 电子表格文件，或将 .ass/.xlsx 文件转换为 .srt 格式。用户通过浏览器访问服务，上传文件，选择转换类型，即可完成操作并下载结果。

1.3 目标用户
- 原有桌面版用户，寻求更便捷的访问方式。
- 不方便或不愿安装桌面软件的用户。
- 需要在不同设备（电脑、平板、手机）上使用的用户。
- 希望将服务集成到其工作流或平台中的开发者或系统管理员。

2. 产品需求

2.1 功能性需求

| 需求ID | 需求模块     | 功能描述                                                     | 优先级 |
| :----- | :----------- | :----------------------------------------------------------- | :----- |
| F-W-001| 核心转换     | 支持导入 .ass 格式的字幕文件用于转换。                       | 高     |
| F-W-002| 核心转换     | 支持导入 .srt 格式的字幕文件用于转换。                       | 高     |
| F-W-003| 核心转换     | 支持导入 .xlsx 格式的字幕表格文件用于转换。                  | 高     |
| F-W-004| 核心转换     | 程序能自动提取字幕的序号、开始时间、结束时间和字幕内容。     | 高     |
| F-W-005| 核心转换     | 支持将 .ass 或 .srt 文件转换为 .xlsx 文件。                  | 高     |
| F-W-006| 核心转换     | 支持将 .ass 文件转换为 .srt 文件。                           | 高     |
| F-W-007| 核心转换     | 支持将 .xlsx 文件转换为 .srt 文件。                          | 高     |
| F-W-008| 文件处理     | 转换后的文件应在用户浏览器中触发下载，文件名应与源文件相关。 | 高     |
| F-W-009| Web UI       | 提供一个简洁、响应式的网页用户界面。                         | 高     |
| F-W-010| Web UI       | 主界面包含文件上传区域和转换类型选择（下拉菜单或按钮）。     | 高     |
| F-W-011| Web UI       | 主界面包含“开始转换”按钮。                                   | 高     |
| F-W-012| Web UI       | 用户选择文件后，应能预览或确认所选文件名和转换类型。         | 中     |
| F-W-013| 提示与反馈   | 转换成功后，应自动触发浏览器下载，并在页面上显示成功消息。   | 高     |
| F-W-014| 提示与反馈   | 如果文件解析或写入失败，应在页面上显示清晰的错误提示信息。   | 高     |
| F-W-015| 提示与反馈   | 在文件上传和转换处理期间，应显示“处理中...”的加载指示器。    | 中     |
| F-W-016| Web UI       | 界面应适配不同屏幕尺寸（桌面、平板、手机）。                 | 中     |
| F-W-017| Web UI       | 界面需完全支持键盘导航（Tab键切换焦点，Enter/Space键激活）。 | 高     |
| F-W-018| Web UI       | 所有交互元素（按钮、链接、表单控件）需提供清晰的焦点指示。   | 高     |
| F-W-019| Web UI       | 界面需确保对屏幕阅读器的完整支持（正确的语义化HTML，ARIA属性）。 | 高     |
| F-W-020| Web UI       | 转换类型选择下拉框需根据上传的文件类型动态更新选项。         | 高     |

2.2 非功能性需求

| 需求ID | 需求类别     | 需求描述                                                     | 优先级 |
| :----- | :----------- | :----------------------------------------------------------- | :----- |
| NF-W-001| 性能         | 单个文件的转换应在合理时间内完成（例如，小于10秒）。         | 高     |
| NF-W-002| 可靠性       | 服务应能稳定运行，处理常见的无效或损坏文件输入而不崩溃。     | 高     |
| NF-W-003| 易用性       | 界面直观，用户操作步骤应尽可能少。                           | 高     |
| NF-W-004| 安全性       | 上传的文件应在处理后及时清理，防止数据泄露。                 | 高     |
| NF-W-005| 可维护性     | 代码结构清晰，后端逻辑与前端界面分离，便于后续维护和扩展。   | 高     |
| NF-W-006| 可部署性     | 应用需支持通过 Docker 容器化部署，简化安装和运行过程。       | 高     |
| NF-W-007| 兼容性       | 前端界面应兼容主流现代浏览器（Chrome, Firefox, Safari, Edge）。 | 高     |
| NF-W-008| 可访问性     | 界面需符合 WCAG 2.1 AA 级别或更高标准，确保残障人士可访问。  | 高     |
| NF-W-009| 可访问性     | 动态更新的界面元素（如下拉框选项）需能被屏幕阅读器正确识别。 | 高     |

3. 技术选型

3.1 后端技术栈
- 语言: Python 3.13+
- 框架: FastAPI
- ASGI 服务器: Uvicorn (用于运行 FastAPI)
- 依赖管理: pip, requirements.txt
- 核心库: openpyxl (已存在于项目中)
- 容器化: Docker

3.2 前端技术栈
- 基础: HTML5, CSS3, JavaScript (ES6+)
- UI 框架: Bootstrap 5 (用于快速构建响应式界面，其组件已内置无障碍特性)
- (可选) 前端构建工具: Webpack/Vite (如果需要模块化或打包优化)

3.3 部署架构
- 应用被打包成一个 Docker 镜像。
- 通过 `docker run` 命令启动容器，并将容器端口映射到宿主机端口。
- 用户通过浏览器访问宿主机的映射端口来使用服务。

4. 核心业务流程

1. 用户访问 Web 应用 URL。
2. 浏览器加载前端页面。屏幕阅读器可以清晰地读出页面标题和主要区域。
3. 用户通过页面上的文件选择器（`<input type="file">`）选择本地字幕文件 (.ass, .srt, .xlsx)。该控件可通过键盘 Tab 键聚焦，并通过 Enter 或 Space 键激活。
4. 用户选择文件后，前端JavaScript代码会读取文件扩展名：
   a. 如果是 `.ass` 文件，页面上的下拉框（`<select>`）将动态更新，包含两个选项："ASS 转 SRT (.ass -> .srt)" 和 "字幕转表格 (.ass -> .xlsx)"。
   b. 如果是 `.srt` 文件，下拉框将动态更新，仅包含一个选项："字幕转表格 (.srt -> .xlsx)"。
   c. 如果是 `.xlsx` 文件，下拉框将动态更新，仅包含一个选项："表格转字幕 (.xlsx -> .srt)"。
   d. 下拉框控件支持键盘操作：Tab 键聚焦，上下箭头键切换选项，Enter 键选择。
5. 用户点击“开始转换”按钮（或通过键盘聚焦后按 Enter/Space 键激活）。
6. 前端通过 HTTP POST 请求将选中的文件和转换类型发送到后端 API (`/api/convert`)。
7. 后端接收到请求：
   a. 接收并验证上传的文件。
   b. 将文件保存到临时目录。
   c. 调用现有核心转换逻辑 (`subtitle_converter.py`) 进行处理。
   d. 等待转换完成。
   e. 如果成功，读取生成的输出文件。
   f. 将输出文件作为响应体流式返回给前端，或生成一个临时下载链接。
   g. 清理临时文件。
8. 前端接收到响应：
   a. 如果是文件流，浏览器自动触发下载。
   b. 如果是错误信息，在页面上显示给用户，并确保屏幕阅读器可以读取到该错误信息。在处理期间，页面应显示带有适当 ARIA 属性的加载指示器。
9. 用户在本地下载并使用转换后的文件。
